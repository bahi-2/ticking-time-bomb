var Web3 = require('web3');
var util = require('ethereumjs-util');
var tx = require('ethereumjs-tx');
try {
var lightwallet = require('eth-lightwallet');
} catch (err) {
	delete global._bitcore
	var lightwallet = require('eth-lightwallet');
}
var txutils = lightwallet.txutils;
var web3 = new Web3(
    new Web3.providers.HttpProvider('https://rinkeby.infura.io/')
);
var contractAddress = '0x68e820b524b2b18d8feb0a7775876f93c0d923e9';
var address = '0x2Bb9E985003d62392Bb75660D3764293336f87F3';
var key = 'dceb14812ea6d7e0811e5b0fcd22e41c83a82bd57e1a7067f92547c7e8711c90';
var bytecode = '6060604052341561000f57600080fd5b60018054600160a060020a03191633600160a060020a031617905560408051908101604052600a81527f626c617a2e62616769630000000000000000000000000000000000000000000060208201526000908051610071929160200190610077565b50610112565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100b857805160ff19168380011785556100e5565b828001600101855582156100e5579182015b828111156100e55782518255916020019190600101906100ca565b506100f19291506100f5565b5090565b61010f91905b808211156100f157600081556001016100fb565b90565b610772806101216000396000f30060606040526004361061006c5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663325a19f18114610079578063392c623e14610103578063481c6a75146101285780635912539714610164578063d3118a5a14610294575b341561007757600080fd5b005b341561008457600080fd5b61008c610327565b60405160208082528190810183818151815260200191508051906020019080838360005b838110156100c85780820151838201526020016100b0565b50505050905090810190601f1680156100f55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561010e57600080fd5b6101166103c5565b60405190815260200160405180910390f35b341561013357600080fd5b61013b6103cb565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561016f57600080fd5b61017a6004356103e7565b604051858152604081018490526060810183905260a06020820181815286546002600019610100600184161502019091160491830182905290608083019060c08401908890801561020c5780601f106101e15761010080835404028352916020019161020c565b820191906000526020600020905b8154815290600101906020018083116101ef57829003601f168201915b50508381038252845460026000196101006001841615020190911604808252602090910190859080156102805780601f1061025557610100808354040283529160200191610280565b820191906000526020600020905b81548152906001019060200180831161026357829003601f168201915b505097505050505050505060405180910390f35b341561029f57600080fd5b61008c60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061041395505050505050565b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103bd5780601f10610392576101008083540402835291602001916103bd565b820191906000526020600020905b8154815290600101906020018083116103a057829003601f168201915b505050505081565b60025481565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b600360208190526000918252604090912080546002820154928201549092600183019290919060040185565b61041b610699565b6001543373ffffffffffffffffffffffffffffffffffffffff9081169116146104795760408051908101604052600e81527f6e6f7420617574686f72697a656400000000000000000000000000000000000060208201529050610693565b60028054600101905560a06040519081016040908152600254808352602080840187905242838501524360608501526080840186905260009182526003905220815181556020820151816001019080516104d79291602001906106ab565b5060408201518160020155606082015181600301556080820151816004019080516105069291602001906106ab565b505060028054600090815260036020526040908190208054928101547fcc304924d907432f8b9348c6f6fbaecb09180c1d90fe3e3b3caf639297e278f094506001909101915183815260408101829052606060208201818152845460026000196101006001841615020190911604918301829052906080830190859080156105cf5780601f106105a4576101008083540402835291602001916105cf565b820191906000526020600020905b8154815290600101906020018083116105b257829003601f168201915b505094505050505060405180910390a16003600060025481526020019081526020016000206004018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561068b5780601f106106605761010080835404028352916020019161068b565b820191906000526020600020905b81548152906001019060200180831161066e57829003601f168201915b505050505090505b92915050565b60206040519081016040526000815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106106ec57805160ff1916838001178555610719565b82800160010185558215610719579182015b828111156107195782518255916020019190600101906106fe565b50610725929150610729565b5090565b61074391905b80821115610725576000815560010161072f565b905600a165627a7a723058201a672ad19e24435fa511b36878a03db387ac5c5854ae532378a96acb33b5a4d70029';
var interface = [
	{
		"constant": true,
		"inputs": [],
		"name": "created",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "docIndex",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "manager",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"name": "indexedDocs",
		"outputs": [
			{
				"name": "docIndex",
				"type": "uint256"
			},
			{
				"name": "publisher",
				"type": "string"
			},
			{
				"name": "publishedOnUnixTime",
				"type": "uint256"
			},
			{
				"name": "publishedInBlockNumber",
				"type": "uint256"
			},
			{
				"name": "aesEncrypted",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_publisher",
				"type": "string"
			},
			{
				"name": "_aesEncrypted",
				"type": "string"
			}
		],
		"name": "addDoc",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "fallback"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"name": "docIndex",
				"type": "uint256"
			},
			{
				"indexed": false,
				"name": "publisher",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "publishedOnUnixTime",
				"type": "uint256"
			}
		],
		"name": "DocumentAdded",
		"type": "event"
	}
];

function sendRaw(rawTx) {	//function to interact with the contract
    var privateKey = new Buffer(key, 'hex');
    var transaction = new tx(rawTx);
    transaction.sign(privateKey);
    var serializedTx = transaction.serialize().toString('hex');
    return web3.eth.sendRawTransaction('0x' + serializedTx);
}
module.exports = {
	createContract: function () {
		var rawTx = {	//transaction for creating the contract
		    nonce: web3.toHex(web3.eth.getTransactionCount(address)),
		    gasLimit: web3.toHex(800000),
		    gasPrice: web3.toHex(20000000000),
		    data: '0x' + bytecode
		};
		contractAddress = sendRaw(rawTx);
	},
	storeBomb: function (publisher, text) {
		var txOptions = {
		    nonce: web3.toHex(web3.eth.getTransactionCount(address)),
		    gasLimit: web3.toHex(800000),
		    gasPrice: web3.toHex(20000000000),
		    to: contractAddress
		}
		var newDocTx = txutils.functionTx(interface, 'addDoc', [publisher,text], txOptions);
		return sendRaw(newDocTx);
	},
	getBomb: function (index) {
		var contract = web3.eth.contract(interface);
		var instance = contract.at(contractAddress);
		return instance.indexedDocs.call(index);
	},
	getAllBombs: function () {
		var contract = web3.eth.contract(interface);
		var instance = contract.at(contractAddress);
		var n = instance.docIndex.call().toNumber();
		var result = [];
		for (var i = n - 1; i >= 0; i--) {
			var parts = instance.indexedDocs.call(i).toString().split(',');
			result.push(parts);
		}
		return result;
	}
}